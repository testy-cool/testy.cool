---
import { SEO as AstroSEO } from "astro-seo";

interface Props {
    title: string;
    description: string;
    image?: string;
    isArticle?: boolean;
    publishedTime?: string;
    modifiedTime?: string;
    author?: string;
    tags?: string[];
    canonicalURL?: string;
    noindex?: boolean;
    contentType?: "post" | "tool" | "til" | "note" | "link";
    url?: string;
}

const {
    title,
    description,
    image = "/images/testycool_pp.png",
    isArticle = false,
    publishedTime,
    modifiedTime,
    author = "TestyCool",
    tags = [],
    canonicalURL = Astro.url.href,
    noindex = false,
    contentType = "post",
    url,
} = Astro.props;

const siteTitle = `${title} | TestyCool`;

// Generate schema markup based on content type
const getSchemaMarkup = () => {
    const baseSchema = {
        "@context": "https://schema.org",
        author: {
            "@type": "Person",
            name: author,
            url: "https://testy.cool",
        },
        publisher: {
            "@type": "Organization",
            name: "TestyCool",
            logo: {
                "@type": "ImageObject",
                url: "https://testy.cool/images/testycool_pp.png",
            },
        },
        headline: title,
        description: description,
        image: image,
        url: canonicalURL,
        datePublished: publishedTime,
        dateModified: modifiedTime || publishedTime,
        keywords: tags.join(", "),
    };

    switch (contentType) {
        case "post":
            return {
                ...baseSchema,
                "@type": "BlogPosting",
                articleSection: "Blog",
            };
        case "tool":
            return {
                ...baseSchema,
                "@type": "TechArticle",
                proficiencyLevel: "Advanced",
                articleSection: "Tools",
            };
        case "til":
            return {
                ...baseSchema,
                "@type": "Article",
                articleSection: "Learning",
            };
        case "note":
            return {
                ...baseSchema,
                "@type": "Article",
                articleSection: "Notes",
            };
        case "link":
            return {
                "@context": "https://schema.org",
                "@type": "WebPage",
                headline: title,
                url: url || canonicalURL,
                datePublished: publishedTime,
                keywords: tags.join(", "),
                description: description,
            };
        default:
            return {
                ...baseSchema,
                "@type": "Article",
            };
    }
};

const schemaMarkup = getSchemaMarkup();
---

<!-- Primary Meta Tags -->
<title>{siteTitle}</title>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<meta name="title" content={siteTitle} />
<meta name="description" content={description} />
<meta name="author" content={author} />

<!-- Schema.org markup -->
<script type="application/ld+json" set:html={JSON.stringify(schemaMarkup)} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content={isArticle ? "article" : "website"} />
<meta property="og:url" content={canonicalURL} />
<meta property="og:title" content={siteTitle} />
<meta property="og:description" content={description} />
<meta property="og:image" content={image} />
<meta property="og:site_name" content="TestyCool" />
<meta property="og:locale" content="en_US" />

<!-- Twitter -->
<meta property="twitter:card" content="summary" />
<meta property="twitter:url" content={canonicalURL} />
<meta property="twitter:title" content={siteTitle} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={image} />
<meta property="twitter:site" content="@testycool" />
<meta property="twitter:creator" content="@testycool" />

<!-- Article Specific Meta Tags -->
{
    isArticle && (
        <>
            <meta property="article:published_time" content={publishedTime} />
            {modifiedTime && (
                <meta property="article:modified_time" content={modifiedTime} />
            )}
            <meta property="article:author" content={author} />
            {tags.map((tag) => (
                <meta property="article:tag" content={tag} />
            ))}
        </>
    )
}

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Robots -->
<meta name="robots" content={noindex ? "noindex, follow" : "index, follow"} />
<meta
    name="googlebot"
    content={noindex ? "noindex, follow" : "index, follow"}
/>
<meta name="google" content="notranslate" />
