---
import type { GetStaticPaths } from "astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import { getCollection, render } from "astro:content";
import FormattedDate from "@/components/FormattedDate.astro";
import Button from "@/components/Button.astro";
import SectionBreak from "@/components/SectionBreak.astro";
import SectionLabel from "@/components/SectionLabel.astro";
import Header from "@/components/Header.astro";
import { CATEGORIES } from "@/consts";
import { Image } from "astro:assets";
import { Icon } from "astro-icon/components";
import avatar from "@/images/testycool_pp.png";
import { extractFirstImage } from "@/utils/formatting";

// Get all content collections
const allLinks = await getCollection("links");
const allNotes = await getCollection("notes", ({ data }) => {
  return import.meta.env.PROD ? data.draft !== true : true;
});
const allPosts = await getCollection("posts", ({ data }) => {
  return import.meta.env.PROD ? data.draft !== true : true;
});
const allTIL = await getCollection("TIL", ({ data }) => {
  return import.meta.env.PROD ? data.draft !== true : true;
});
const allTools = await getCollection("tools", ({ data }) => {
  return import.meta.env.PROD ? data.draft !== true : true;
});

// Combine and sort all content
const allFeed = [
  ...allLinks,
  ...allNotes,
  ...allPosts,
  ...allTIL,
  ...allTools,
].sort((a, b) => {
  const aDate = a.data.published;
  const bDate = b.data.published;
  return Date.parse(bDate.toString()) - Date.parse(aDate.toString());
});

// Create paginated data
const pageSize = 10;
const currentPage = 1;
const start = 0;
const end = start + pageSize;
const entries = allFeed.slice(start, end);

// Calculate pagination info
const lastPage = Math.ceil(allFeed.length / pageSize);
const nextPage =
  currentPage < lastPage ? `/page/${currentPage + 1}` : undefined;
---

<BaseLayout
  title="Home"
  description="UI engineer who enjoys working at the intersection of design and engineering teams.">
  <Header>
    <SectionLabel as="p">Intro</SectionLabel>
    <div
      class="isolate relative flex justify-center items-center mx-auto mb-6 size-8">
      <div
        class:list={[
          "pointer-events-none absolute -inset-y-8 -left-0.5 border-l border-dashed border-neutral-700",
          "[mask-image:linear-gradient(to_bottom,transparent,white_2rem,white_calc(100%_-_2rem),transparent)]",
        ]}
        aria-hidden="true">
      </div>
      <div
        class:list={[
          "pointer-events-none absolute -inset-y-8 -right-0.5 border-r border-dashed border-neutral-700",
          "[mask-image:linear-gradient(to_bottom,transparent,white_2rem,white_calc(100%_-_2rem),transparent)]",
        ]}
        aria-hidden="true">
      </div>
      <div
        class:list={[
          "pointer-events-none absolute -inset-x-8 -top-0.5 border-t border-dashed border-neutral-700",
          "[mask-image:linear-gradient(to_right,transparent,white_2rem,white_calc(100%_-_2rem),transparent)]",
        ]}
        aria-hidden="true">
      </div>
      <div
        class:list={[
          "pointer-events-none absolute -inset-x-8 -bottom-0.5 border-b border-dashed border-neutral-700",
          "[mask-image:linear-gradient(to_right,transparent,white_2rem,white_calc(100%_-_2rem),transparent)]",
        ]}
        aria-hidden="true">
      </div>
      <Image
        src={avatar}
        alt="TestyCool Avatar"
        width={128}
        height={128}
        loading="eager"
        class="rounded-full w-8"
      />
    </div>
    <h1 class="font-mono text-neutral-400 text-sm">TestyCool</h1>
    <p class="mt-2 font-medium text-xl sm:text-2xl text-balance tracking-tight">
      Notes, links, tutorials and thoughts about dev stuff. Ideas, tips and
      opinions on open source projects.
    </p>
    <div
      class="flex justify-center gap-x-2 mt-4 font-mono text-neutral-400 text-xs uppercase">
      <p>Categories:</p>
      <ul class="flex gap-x-[inherit]">
        {
          CATEGORIES.map(({ url, label }) => (
            <li>
              <a class="hover:text-white underline" href={url}>
                {label}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
  </Header>

  <SectionBreak />

  <section class="relative">
    <SectionLabel as="h2">Items</SectionLabel>
    <ul class="divide-y divide-dashed divide-neutral-700">
      {
        entries.map((item) => {
          if (item.collection === "links") {
            return render(item).then(({ Content }) => (
              <li class="px-4 sm:px-8 py-8" id={`link-${item.id}`}>
                <div class="flex items-center gap-2 mb-2">
                  <span class="font-mono text-neutral-500 text-xs uppercase">
                    Link
                  </span>
                  <dl class="flex items-center gap-4">
                    <dt class="sr-only">Published</dt>
                    <dd class="font-mono text-neutral-400 text-sm">
                      <FormattedDate date={item.data.published} />
                    </dd>
                  </dl>
                </div>
                <h2 class="font-semibold">
                  <a
                    href={item.data.link}
                    class="group decoration-2 decoration-neutral-600 hover:decoration-white underline">
                    {item.data.title}
                  </a>
                </h2>
                <p class="font-mono text-neutral-400 text-sm">
                  {new URL(item.data.link).hostname}
                </p>
                {item.body && (
                  <div class="mt-4 prose">
                    <Content />
                  </div>
                )}
              </li>
            ));
          } else if (item.collection === "posts") {
            return (
              <li class="px-4 sm:px-8 py-8" id={`post-${item.id}`}>
                <div class="flex items-center gap-2 mb-2">
                  <span class="font-mono text-neutral-500 text-xs uppercase">
                    Post
                  </span>
                  <dl class="flex items-center gap-4">
                    <dt class="sr-only">Published</dt>
                    <dd class="font-mono text-neutral-400 text-sm">
                      <FormattedDate date={item.data.published} />
                    </dd>
                  </dl>
                </div>
                <h2 class="font-semibold text-xl tracking-tight">
                  <a
                    href={`/posts/${item.id}`}
                    class="group decoration-2 decoration-neutral-600 hover:decoration-white underline">
                    {item.data.title}
                  </a>
                </h2>
                <p class="mt-2 text-neutral-400">{item.data.description}</p>
              </li>
            );
          } else if (item.collection === "TIL") {
            return (
              <li class="px-4 sm:px-8 py-8" id={`til-${item.id}`}>
                <div class="flex items-center gap-2 mb-2">
                  <span class="font-mono text-neutral-500 text-xs uppercase">
                    TIL
                  </span>
                  <dl class="flex items-center gap-4">
                    <dt class="sr-only">Published</dt>
                    <dd class="font-mono text-neutral-400 text-sm">
                      <FormattedDate date={item.data.published} />
                    </dd>
                  </dl>
                </div>
                <h2 class="font-semibold text-xl tracking-tight">
                  <a
                    href={`/TIL/${item.id}`}
                    class="group decoration-2 decoration-neutral-600 hover:decoration-white underline">
                    {item.data.title}
                  </a>
                </h2>
                <p class="mt-2 text-neutral-400">{item.data.description}</p>
              </li>
            );
          } else if (item.collection === "tools") {
            return (
              <li class="px-4 sm:px-8 py-8" id={`tool-${item.id}`}>
                <div class="flex items-center gap-2 mb-2">
                  <span class="font-mono text-neutral-500 text-xs uppercase">
                    Tool
                  </span>
                  <dl class="flex items-center gap-4">
                    <dt class="sr-only">Published</dt>
                    <dd class="font-mono text-neutral-400 text-sm">
                      <FormattedDate date={item.data.published} />
                    </dd>
                  </dl>
                </div>
                <h2 class="font-semibold text-xl tracking-tight">
                  <a
                    href={`/tools/${item.id}`}
                    class="group decoration-2 decoration-neutral-600 hover:decoration-white underline">
                    {item.data.title}
                  </a>
                </h2>
                <p class="mt-2 text-neutral-400">{item.data.description}</p>
              </li>
            );
          } else {
            return render(item).then(({ Content }) => {
              const firstImage = item.body
                ? extractFirstImage(item.body)
                : null;
              return (
                <li class="px-4 sm:px-8 py-8" id={`note-${item.id}`}>
                  <div class="flex items-center gap-2 mb-2">
                    <span class="font-mono text-neutral-500 text-xs uppercase">
                      Note
                    </span>
                    <dl class="flex items-center gap-4">
                      <dt class="sr-only">Published</dt>
                      <dd class="font-mono text-neutral-400 text-sm">
                        <FormattedDate
                          date={item.data.published}
                          type="datetime"
                        />
                      </dd>
                    </dl>
                  </div>
                  <h2 class="font-semibold text-xl tracking-tight">
                    <a
                      href={`/notes/${encodeURIComponent(item.id)}`}
                      class="group decoration-2 decoration-neutral-600 hover:decoration-white underline">
                      {item.data.title}
                    </a>
                  </h2>
                  {item.data.description && (
                    <p class="mt-1 mb-4 text-neutral-400">
                      {item.data.description}
                    </p>
                  )}
                  {firstImage && (
                    <div class="w-full">
                      <img
                        src={firstImage}
                        alt=""
                        class="rounded-sm w-full object-cover aspect-[2/1]"
                      />
                    </div>
                  )}
                </li>
              );
            });
          }
        })
      }
    </ul>
    {
      lastPage > 1 && (
        <nav class="px-4 sm:px-8 py-8 border-neutral-700 border-t">
          <ul class="grid grid-cols-3 font-mono font-medium text-neutral-400 text-xs uppercase">
            <li class="text-left">
              <span class="text-neutral-600">Previous page</span>
            </li>
            <li class="text-center">
              <span>
                Page {currentPage} of {lastPage}
              </span>
            </li>
            <li class="text-right">
              {nextPage ? (
                <a href={nextPage}>Next page</a>
              ) : (
                <span class="text-neutral-600">Next page</span>
              )}
            </li>
          </ul>
        </nav>
      )
    }
  </section>
</BaseLayout>
